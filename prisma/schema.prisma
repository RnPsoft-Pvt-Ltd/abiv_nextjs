generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String                 @id @default(cuid())
  name               String?
  email              String?                @unique
  username           String?
  emailVerified      DateTime?              @map("email_verified")
  image              String?
  password           String?
  gender             String?
  dateOfBirth        DateTime?              @map("date_of_birth") @db.Date
  address            String?
  phone              String?
  createdAt          DateTime               @default(now()) @map("created_at")
  updatedAt          DateTime               @updatedAt @map("updated_at")
  role               Role                   @default(ADMIN)
  institutionId      String?                @map("institution_id")
  accounts           Account[]
  attachments        AssignmentAttachment[] @relation("UploadedByUser")
  noteAttachments    NoteAttachment[]       @relation("UploadedNoteAttachment")
  comments           AssignmentComment[]
  Authenticator      Authenticator[]
  calendarEvents     CalendarEvent[]        @relation("CreatedByUser")
  creditTransactions CreditTransaction[]    @relation("PerformedByUser")
  notifications      Notification[]
  sessions           Session[]
  student            Student?
  teacher            Teacher?
  institution        Institution?           @relation(fields: [institutionId], references: [id], onDelete: Restrict)

  @@map("users")
}

model Account {
  id                String   @id @default(cuid())
  userId            String   @map("user_id")
  type              String
  provider          String
  providerAccountId String   @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Authenticator {
  credentialID         String  @unique @map("credential_id")
  userId               String  @map("user_id")
  providerAccountId    String  @map("provider_account_id")
  credentialPublicKey  String  @map("credential_public_key")
  counter              Int
  credentialDeviceType String  @map("credential_device_type")
  credentialBackedUp   Boolean @map("credential_backup")
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
  @@map("authenticators")
}

model Institution {
  id                  String               @id @default(cuid())
  name                String
  type                String
  address             String?
  city                String?
  state               String?
  country             String?
  postalCode          String?              @map("postal_code")
  phone               String?
  email               String?
  website             String?
  createdAt           DateTime             @default(now()) @map("created_at")
  updatedAt           DateTime             @updatedAt @map("updated_at")
  logoUrl             String?              @map("logo_url")
  primaryColor        String?              @map("primary_color")
  subscriptionStatus  SubscriptionStatus?  @map("subscription_status")
  subscriptionEndDate DateTime?            @map("subscription_end_date")
  subscriptionPlanId  String?              @map("subscription_plan_id")
  announcements       Announcement[]
  attendanceSettings  AttendanceSettings[]
  calendarEvents      CalendarEvent[]
  creditAllocations   CreditAllocation[]
  creditTransactions  CreditTransaction[]
  credits             Credit?
  departments         Department[]
  examTypes           ExamType[]
  subscriptionPlan    SubscriptionPlan?    @relation(fields: [subscriptionPlanId], references: [id])
  invoices            Invoice[]
  semesters           Semester[]
  subscriptions       Subscription[]
  users               User[]

  @@map("institutions")
}

model Department {
  id              String                     @id @default(cuid())
  name            String
  code            String
  description     String?
  institutionId   String                     @map("institution_id")
  createdAt       DateTime                   @default(now()) @map("created_at")
  updatedAt       DateTime                   @updatedAt @map("updated_at")
  announcements   Announcement[]
  batches         Batch[]
  courses         Course[]
  departmentHeads DepartmentHead?
  institution     Institution                @relation(fields: [institutionId], references: [id])
  students        Student[]
  teacherMetrics  TeacherPerformanceMetric[]
  teachers        Teacher[]

  @@unique([institutionId, code])
  @@map("departments")
}

model Student {
  id                    String                     @id @default(cuid())
  userId                String                     @unique @map("user_id")
  studentRoll           String                     @map("student_roll")
  parentGuardianName    String?                    @map("parent_guardian_name")
  parentGuardianPhone   String?                    @map("parent_guardian_phone")
  parentGuardianEmail   String?                    @map("parent_guardian_email")
  departmentId          String                     @map("department_id")
  batchId               String                     @map("batch_id")
  currentSemester       Int?                       @map("current_semester")
  currentYear           Int?                       @map("current_year")
  enrollmentStatus      EnrollmentStatus           @map("enrollment_status")
  groupMemberships      AssignmentGroupMember[]
  assignmentSubmissions AssignmentSubmission[]
  attendanceRecords     Attendance[]
  examSubmissions       ExamSubmission[]
  classEnrollments      StudentClassEnrollment[]
  performanceMetrics    StudentPerformanceMetric[]
  batch                 Batch                      @relation(fields: [batchId], references: [id])
  department            Department                 @relation(fields: [departmentId], references: [id])
  user                  User                       @relation(fields: [userId], references: [id])
  videoViewLogs         VideoViewLog[]

  @@unique([departmentId, studentRoll])
  @@index([studentRoll])
  @@map("students")
}

model Teacher {
  id                    String                     @id @default(cuid())
  userId                String                     @unique @map("user_id")
  teacherCode           String                     @map("teacher_code")
  qualification         String?
  joiningDate           DateTime?                  @map("joining_date") @db.Date
  employmentStatus      EmploymentStatus           @map("employment_status")
  departmentId          String                     @map("department_id")
  performanceScore      Float?                     @default(0) @map("performance_score")
  lastEvaluationDate    DateTime?                  @map("last_evaluation_date") @db.Date
  createdQuestionBanks  AIQuestionBank[]           @relation("QuestionBankCreator")
  aiQuestionBanks       AIQuestionBank[]           @relation("AssignedTeacher")
  createdVideos         AIVideoContent[]           @relation("VideoContentCreator")
  aiVideoContents       AIVideoContent[]           @relation("AssignedTeacher")
  announcements         Announcement[]             @relation("CreatedByTeacher")
  gradedAnswerScripts   AnswerScript[]             @relation("GradedByTeacher")
  gradedAssignments     AssignmentSubmission[]     @relation("GradedByTeacher")
  createdAssignments    Assignment[]               @relation("AssignmentCreator")
  notes                 Note[]                     @relation("NoteCreator")
  attendanceRecords     Attendance[]               @relation("RecordedByTeacher")
  attendanceSessions    AttendanceSession[]
  classSections         ClassSection[]
  createdCourses        Course[]                   @relation("CourseCreator")
  departmentHeadRole    DepartmentHead?
  gradedExamSubmissions ExamSubmission[]           @relation("GradedByTeacher")
  createdExams          Exam[]                     @relation("ExamCreator")
  createdQuestions      Question[]                 @relation("QuestionCreator")
  evaluatedMetrics      TeacherPerformanceMetric[] @relation("EvaluatedByTeacher")
  performanceMetrics    TeacherPerformanceMetric[]
  department            Department                 @relation(fields: [departmentId], references: [id])
  user                  User                       @relation(fields: [userId], references: [id])
  Note                  Note[]
  teacherCourseSectionRelations TeacherCourseSectionRelation[]

  @@unique([departmentId, teacherCode])
  @@index([teacherCode])
  @@map("teachers")
}

model DepartmentHead {
  id              String     @id @default(cuid())
  teacherId       String     @unique @map("teacher_id")
  departmentId    String     @unique @map("department_id")
  appointmentDate DateTime   @map("appointment_date") @db.Date
  endDate         DateTime?  @map("end_date") @db.Date
  createdAt       DateTime   @default(now()) @map("created_at")
  updatedAt       DateTime   @updatedAt @map("updated_at")
  department      Department @relation(fields: [departmentId], references: [id])
  teacher         Teacher    @relation(fields: [teacherId], references: [id])

  @@map("department_heads")
}

model Course {
  id                String              @id @default(cuid())
  courseCode        String              @unique @map("course_code")
  name              String
  description       String?
  creditHours       Int                 @default(0) @map("credit_hours")
  courseType        CourseType          @map("course_type")
  departmentId      String              @map("department_id")
  createdAt         DateTime            @default(now()) @map("created_at")
  updatedAt         DateTime            @updatedAt @map("updated_at")
  createdById       String              @map("created_by")
  aiQuestionBanks   AIQuestionBank[]
  aiVideoContents   AIVideoContent[]
  createdBy         Teacher             @relation("CourseCreator", fields: [createdById], references: [id])
  department        Department          @relation(fields: [departmentId], references: [id])
  AttendanceSession AttendanceSession[]
 teacherCourseSectionRelations TeacherCourseSectionRelation[]

  @@map("courses")
}

model Batch {
  id            String         @id @default(cuid())
  batchName     String         @map("batch_name")
  year          Int
  departmentId  String         @map("department_id")
  maxStudents   Int            @default(0) @map("max_students")
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")
  department    Department     @relation(fields: [departmentId], references: [id])
  classSections ClassSection[]
  students      Student[]

  @@map("batches")
}

model Semester {
  id             String                     @id @default(cuid())
  name           String
  startDate      DateTime                   @map("start_date") @db.Date
  endDate        DateTime                   @map("end_date") @db.Date
  institutionId  String                     @map("institution_id")
  isCurrent      Boolean                    @map("is_current")
  createdAt      DateTime                   @default(now()) @map("created_at")
  updatedAt      DateTime                   @updatedAt @map("updated_at")
  classSections  ClassSection[]
  institution    Institution                @relation(fields: [institutionId], references: [id])
  studentMetrics StudentPerformanceMetric[]
  teacherMetrics TeacherPerformanceMetric[]
teacherCourseSectionRelations TeacherCourseSectionRelation[]

  @@map("semesters")
}

model ClassSection {
  id                 String                     @id @default(cuid())
  sectionName        String                     @map("section_name")
  batchId            String                     @map("batch_id")
  semesterId         String                     @map("semester_id")
  teacherId          String                     @map("teacher_id")
  maxStudents        Int                        @default(0) @map("max_students")
  createdAt          DateTime                   @default(now()) @map("created_at")
  updatedAt          DateTime                   @updatedAt @map("updated_at")
  aiVideoContents    AIVideoContent[]
  announcements      Announcement[]
  assignmentGroups   AssignmentGroup[]
  assignments        Assignment[]
  notes              Note[]
  attendanceSessions AttendanceSession[]
  calendarEvents     CalendarEvent[]
  batch              Batch                      @relation(fields: [batchId], references: [id])
  semester           Semester                   @relation(fields: [semesterId], references: [id])
  teacher            Teacher                    @relation(fields: [teacherId], references: [id])
  classStream        ClassStream[]
  exams              Exam[]
  studentEnrollments StudentClassEnrollment[]
  studentMetrics     StudentPerformanceMetric[]
 teacherCourseSectionRelations TeacherCourseSectionRelation[]

  @@map("class_sections")
}

model StudentClassEnrollment {
  id               String                @id @default(cuid())
  studentId        String                @map("student_id")
  classSectionId   String                @map("class_section_id")
  createdAt        DateTime              @default(now()) @map("created_at")
  updatedAt        DateTime              @updatedAt @map("updated_at")
  enrollmentStatus ClassEnrollmentStatus @map("enrollment_status")
  classSection     ClassSection          @relation(fields: [classSectionId], references: [id])
  student          Student               @relation(fields: [studentId], references: [id])

  @@map("student_class_enrollments")
}

model AttendanceSession {
  id                String       @id @default(cuid())
  classSectionId    String       @map("class_section_id")
  courseId          String       @map("course_id") // New field 
  teacherId         String       @map("teacher_id")
  sessionDate       DateTime     @map("session_date") @db.Date
  startTime         DateTime     @map("start_time") @db.Time(6)
  endTime           DateTime     @map("end_time") @db.Time(6)
  sessionType       SessionType  @map("session_type")
  status            Status       @default(SCHEDULED)
  createdAt         DateTime     @default(now()) @map("created_at")
  updatedAt         DateTime     @updatedAt @map("updated_at")
  attendanceRecords Attendance[]
  classSection      ClassSection @relation(fields: [classSectionId], references: [id])
  course            Course       @relation(fields: [courseId], references: [id]) // New relation 
  teacher           Teacher      @relation(fields: [teacherId], references: [id])

  @@map("attendance_sessions")
}

model Attendance {
  id                  String            @id @default(cuid())
  attendanceSessionId String            @map("attendance_session_id")
  studentId           String            @map("student_id")
  status              AttendanceStatus
  remarks             String?
  recordedById        String            @map("recorded_by")
  recordedAt          DateTime          @map("recorded_at")
  updatedAt           DateTime          @updatedAt @map("updated_at")
  isLocked            Boolean           @default(false) @map("is_locked")
  attendanceSession   AttendanceSession @relation(fields: [attendanceSessionId], references: [id])
  recordedBy          Teacher           @relation("RecordedByTeacher", fields: [recordedById], references: [id])
  student             Student           @relation(fields: [studentId], references: [id])

  @@map("attendance")
}

model AttendanceSettings {
  id                          String      @id @default(cuid())
  institutionId               String      @map("institution_id")
  minimumAttendancePercentage Float       @map("minimum_attendance_percentage")
  autoLockAttendance          Boolean     @map("auto_lock_attendance")
  autoLockAfterHours          Int         @map("auto_lock_after_hours")
  allowExcusedAbsences        Boolean     @map("allow_excused_absences")
  createdAt                   DateTime    @default(now()) @map("created_at")
  updatedAt                   DateTime    @updatedAt @map("updated_at")
  institution                 Institution @relation(fields: [institutionId], references: [id])

  @@map("attendance_settings")
}

model ExamType {
  id            String      @id @default(cuid())
  name          String
  description   String?
  institutionId String      @map("institution_id")
  weightage     Float       @default(0)
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")
  institution   Institution @relation(fields: [institutionId], references: [id])
  exams         Exam[]

  @@map("exam_types")
}

model Exam {
  id              String           @id @default(cuid())
  title           String
  description     String?
  examTypeId      String           @map("exam_type_id")
  classSectionId  String           @map("class_section_id")
  examDate        DateTime         @map("exam_date") @db.Date
  startTime       DateTime         @map("start_time") @db.Time(6)
  endTime         DateTime         @map("end_time") @db.Time(6)
  durationMinutes Int              @map("duration_minutes")
  totalMarks      Float            @map("total_marks")
  passingMarks    Float            @map("passing_marks")
  isPublished     Boolean          @default(false) @map("is_published")
  createdAt       DateTime         @default(now()) @map("created_at")
  updatedAt       DateTime         @updatedAt @map("updated_at")
  createdById     String           @map("created_by")
  status          ExamStatus
  isAiGenerated   Boolean          @default(false) @map("is_ai_generated")
  examSubmissions ExamSubmission[]
  classSection    ClassSection     @relation(fields: [classSectionId], references: [id])
  createdBy       Teacher          @relation("ExamCreator", fields: [createdById], references: [id])
  examType        ExamType         @relation(fields: [examTypeId], references: [id])
  questions       Question[]

  @@map("exams")
}

model Question {
  id              String         @id @default(cuid())
  examId          String         @map("exam_id")
  questionText    String         @map("question_text")
  questionType    QuestionType   @map("question_type")
  marks           Float          @default(0)
  difficultyLevel String         @map("difficulty_level")
  correctAnswer   Json           @map("correct_answer")
  options         Json?
  createdById     String         @map("created_by")
  createdAt       DateTime       @default(now()) @map("created_at")
  updatedAt       DateTime       @updatedAt @map("updated_at")
  isAiGenerated   Boolean        @default(false) @map("is_ai_generated")
  answerScripts   AnswerScript[]
  createdBy       Teacher        @relation("QuestionCreator", fields: [createdById], references: [id])
  exam            Exam           @relation(fields: [examId], references: [id])

  @@map("questions")
}

model ExamSubmission {
  id             String             @id @default(cuid())
  examId         String             @map("exam_id")
  studentId      String             @map("student_id")
  submissionTime DateTime           @map("submission_time")
  obtainedMarks  Float              @default(0) @map("obtained_marks")
  status         AnswerScriptStatus @map("status")
  feedback       String?
  gradedById     String?            @map("graded_by")
  gradedAt       DateTime?          @map("graded_at")
  createdAt      DateTime           @default(now()) @map("created_at")
  updatedAt      DateTime           @updatedAt @map("updated_at")
  answerScripts  AnswerScript[]
  exam           Exam               @relation(fields: [examId], references: [id])
  gradedBy       Teacher?           @relation("GradedByTeacher", fields: [gradedById], references: [id])
  student        Student            @relation(fields: [studentId], references: [id])

  @@map("exam_submissions")
}

model AnswerScript {
  id               String             @id @default(cuid())
  examSubmissionId String             @map("exam_submission_id")
  questionId       String             @map("question_id")
  studentAnswer    String             @map("student_answer")
  obtainedMarks    Float              @default(0) @map("obtained_marks")
  remarks          String?
  status           AnswerScriptStatus @map("status")
  gradedById       String?            @map("graded_by")
  gradedAt         DateTime?          @map("graded_at")
  createdAt        DateTime           @default(now()) @map("created_at")
  updatedAt        DateTime           @updatedAt @map("updated_at")
  isAiGraded       Boolean            @default(false) @map("is_ai_graded")
  aiFeedback       Json?
  examSubmission   ExamSubmission     @relation(fields: [examSubmissionId], references: [id])
  gradedBy         Teacher?           @relation("GradedByTeacher", fields: [gradedById], references: [id])
  question         Question           @relation(fields: [questionId], references: [id])

  @@map("answer_scripts")
}

model AIVideoContent {
  id              String          @id @default(cuid())
  title           String
  description     String
  courseId        String          @map("course_id")
  teacherId       String          @map("teacher_id")
  classSectionId  String?         @map("class_section_id")
  videoUrl        String          @map("video_url")
  thumbnailUrl    String          @map("thumbnail_url")
  durationSeconds Int             @map("duration_seconds")
  chunkData       Json            @map("chunk_data")
  voiceUri        String          @map("voice_uri")
  teacherModelUri String          @map("teacher_model_uri")
  summary         String
  notes           String
  status          AIContentStatus @map("status")
  creditsUsed     Int             @map("credits_used")
  createdAt       DateTime        @default(now()) @map("created_at")
  updatedAt       DateTime        @updatedAt @map("updated_at")
  createdById     String          @map("created_by")
  version         Int             @default(1) @map("version")
  classSection    ClassSection?   @relation(fields: [classSectionId], references: [id])
  course          Course          @relation(fields: [courseId], references: [id])
  createdBy       Teacher         @relation("VideoContentCreator", fields: [createdById], references: [id])
  teacher         Teacher         @relation("AssignedTeacher", fields: [teacherId], references: [id])
  videoViewLogs   VideoViewLog[]

  @@map("ai_video_content")
}

model VideoViewLog {
  id                     String         @id @default(cuid())
  videoId                String         @map("video_id")
  studentId              String         @map("student_id")
  viewStarted            DateTime       @map("view_started")
  viewEnded              DateTime       @map("view_ended")
  durationWatchedSeconds Int            @map("duration_watched_seconds")
  completionPercentage   Float          @map("completion_percentage")
  feedback               String?
  rating                 Int?
  createdAt              DateTime       @default(now()) @map("created_at")
  student                Student        @relation(fields: [studentId], references: [id])
  video                  AIVideoContent @relation(fields: [videoId], references: [id])

  @@map("video_view_logs")
}

model AIQuestionBank {
  id              String          @id @default(cuid())
  title           String
  courseId        String          @map("course_id")
  teacherId       String          @map("teacher_id")
  questionType    QuestionType    @map("question_type")
  questionCount   Int             @map("question_count")
  difficultyLevel String          @map("difficulty_level")
  metadata        Json
  status          AIContentStatus @map("status")
  createdAt       DateTime        @default(now()) @map("created_at")
  updatedAt       DateTime        @updatedAt @map("updated_at")
  createdById     String          @map("created_by")
  version         Int             @default(1) @map("version")
  course          Course          @relation(fields: [courseId], references: [id])
  createdBy       Teacher         @relation("QuestionBankCreator", fields: [createdById], references: [id])
  teacher         Teacher         @relation("AssignedTeacher", fields: [teacherId], references: [id])

  @@map("ai_question_banks")
}

model SubscriptionPlan {
  id                           String         @id @default(cuid())
  name                         String
  description                  String?
  priceMonthly                 Float          @map("price_monthly")
  priceYearly                  Float          @map("price_yearly")
  pricePerStudent              Float          @map("price_per_student")
  maxTeachers                  Int            @map("max_teachers")
  maxStudents                  Int            @map("max_students")
  videoCreditsIncluded         Int            @map("video_credits_included")
  questionPaperCreditsIncluded Int            @map("question_paper_credits_included")
  copyCheckingCreditsIncluded  Int            @map("copy_checking_credits_included")
  attendanceFeature            Boolean        @map("attendance_feature")
  performanceAnalytics         Boolean        @map("performance_analytics")
  aiVideoGeneration            Boolean        @map("ai_video_generation")
  aiQuestionGeneration         Boolean        @map("ai_question_generation")
  aiPaperChecking              Boolean        @map("ai_paper_checking")
  createdAt                    DateTime       @default(now()) @map("created_at")
  updatedAt                    DateTime       @updatedAt @map("updated_at")
  institutions                 Institution[]
  subscriptions                Subscription[]

  @@map("subscription_plans")
}

model Subscription {
  id               String             @id @default(cuid())
  institutionId    String             @map("institution_id")
  planId           String             @map("plan_id")
  startDate        DateTime           @map("start_date") @db.Date
  endDate          DateTime           @map("end_date") @db.Date
  status           SubscriptionStatus @map("status")
  amountPaid       Float              @map("amount_paid")
  paymentFrequency String             @map("payment_frequency")
  teachersCount    Int                @map("teachers_count")
  studentsCount    Int                @map("students_count")
  createdAt        DateTime           @default(now()) @map("created_at")
  updatedAt        DateTime           @updatedAt @map("updated_at")
  invoices         Invoice[]
  institution      Institution        @relation(fields: [institutionId], references: [id])
  plan             SubscriptionPlan   @relation(fields: [planId], references: [id])

  @@map("subscriptions")
}

model Credit {
  id                          String      @id @default(cuid())
  institutionId               String      @unique @map("institution_id")
  videoCreditsBalance         Int         @default(0) @map("video_credits_balance")
  questionPaperCreditsBalance Int         @default(0) @map("question_paper_credits_balance")
  copyCheckingCreditsBalance  Int         @default(0) @map("copy_checking_credits_balance")
  lastUpdated                 DateTime    @map("last_updated")
  institution                 Institution @relation(fields: [institutionId], references: [id])

  @@map("credits")
}

model CreditTransaction {
  id              String          @id @default(cuid())
  institutionId   String          @map("institution_id")
  transactionType TransactionType @map("transaction_type")
  creditType      CreditType      @map("credit_type")
  quantity        Int
  description     String?
  relatedEntityId String?         @map("related_entity_id")
  performedById   String          @map("performed_by")
  createdAt       DateTime        @default(now()) @map("created_at")
  institution     Institution     @relation(fields: [institutionId], references: [id])
  performedBy     User            @relation("PerformedByUser", fields: [performedById], references: [id])

  @@map("credit_transactions")
}

model CreditAllocation {
  id            String      @id @default(cuid())
  institutionId String      @map("institution_id")
  creditType    CreditType  @map("credit_type")
  quantity      Int
  allocatedAt   DateTime    @map("allocated_at")
  source        String      @map("source")
  createdAt     DateTime    @default(now()) @map("created_at")
  institution   Institution @relation(fields: [institutionId], references: [id])

  @@map("credit_allocations")
}

model Invoice {
  id               String        @id @default(cuid())
  institutionId    String        @map("institution_id")
  subscriptionId   String        @map("subscription_id")
  invoiceNumber    String        @map("invoice_number")
  issueDate        DateTime      @map("issue_date") @db.Date
  dueDate          DateTime      @map("due_date") @db.Date
  amount           Float
  status           InvoiceStatus @map("status")
  paymentMethod    String?       @map("payment_method")
  paymentReference String?       @map("payment_reference")
  paidAt           DateTime?     @map("paid_at")
  createdAt        DateTime      @default(now()) @map("created_at")
  updatedAt        DateTime      @updatedAt @map("updated_at")
  institution      Institution   @relation(fields: [institutionId], references: [id])
  subscription     Subscription  @relation(fields: [subscriptionId], references: [id])

  @@map("invoices")
}

model TeacherPerformanceMetric {
  id                        String     @id @default(cuid())
  teacherId                 String     @map("teacher_id")
  departmentId              String     @map("department_id")
  semesterId                String     @map("semester_id")
  attendanceRegularityScore Float      @map("attendance_regularity_score")
  studentPerformanceScore   Float      @map("student_performance_score")
  contentQualityScore       Float      @map("content_quality_score")
  overallScore              Float      @map("overall_score")
  detailedMetrics           Json       @map("detailed_metrics")
  evaluationDate            DateTime   @map("evaluation_date")
  evaluatedById             String     @map("evaluated_by")
  createdAt                 DateTime   @default(now()) @map("created_at")
  updatedAt                 DateTime   @updatedAt @map("updated_at")
  department                Department @relation(fields: [departmentId], references: [id])
  evaluatedBy               Teacher    @relation("EvaluatedByTeacher", fields: [evaluatedById], references: [id])
  semester                  Semester   @relation(fields: [semesterId], references: [id])
  teacher                   Teacher    @relation(fields: [teacherId], references: [id])

  @@map("teacher_performance_metrics")
}

model StudentPerformanceMetric {
  id                       String              @id @default(cuid())
  studentId                String              @map("student_id")
  classSectionId           String              @map("class_section_id")
  semesterId               String              @map("semester_id")
  attendancePercentage     Float               @map("attendance_percentage")
  overallGradePoints       Float               @map("overall_grade_points")
  assignmentCompletionRate Float               @map("assignment_completion_rate")
  detailedMetrics          Json                @map("detailed_metrics")
  performanceCategory      PerformanceCategory @map("performance_category")
  createdAt                DateTime            @default(now()) @map("created_at")
  updatedAt                DateTime            @updatedAt @map("updated_at")
  classSection             ClassSection        @relation(fields: [classSectionId], references: [id])
  semester                 Semester            @relation(fields: [semesterId], references: [id])
  student                  Student             @relation(fields: [studentId], references: [id])

  @@map("student_performance_metrics")
}

model Notification {
  id               String    @id @default(cuid())
  userId           String    @map("user_id")
  title            String
  message          String
  notificationType String    @map("notification_type")
  isRead           Boolean   @default(false) @map("is_read")
  readAt           DateTime? @map("read_at")
  actionUrl        String?   @map("action_url")
  channel          String?   @map("channel")
  templateId       String?   @map("template_id")
  createdAt        DateTime  @default(now()) @map("created_at")
  user             User      @relation(fields: [userId], references: [id])

  @@map("notifications")
}

model Announcement {
  id               String        @id @default(cuid())
  title            String
  content          String
  createdById      String        @map("created_by")
  institutionId    String        @map("institution_id")
  departmentId     String?       @map("department_id")
  classSectionId   String?       @map("class_section_id")
  isImportant      Boolean       @default(false) @map("is_important")
  isPinned         Boolean       @default(false) @map("is_pinned")
  visibility       String?       @map("visibility")
  expiryDate       DateTime?     @map("expiry_date") @db.Date
  createdAt        DateTime      @default(now()) @map("created_at")
  updatedAt        DateTime      @updatedAt @map("updated_at")
  classSection     ClassSection? @relation(fields: [classSectionId], references: [id])
  createdByTeacher Teacher       @relation("CreatedByTeacher", fields: [createdById], references: [id])
  department       Department?   @relation(fields: [departmentId], references: [id])
  institution      Institution   @relation(fields: [institutionId], references: [id])

  @@map("announcements")
}

model Assignment {
  id             String                 @id @default(cuid())
  title          String
  description    String?
  classSectionId String                 @map("class_section_id")
  createdById    String                 @map("created_by")
  dueDate        DateTime?              @map("due_date") @db.Date
  maxPoints      Float                  @default(0) @map("max_points")
  isPublished    Boolean                @default(false) @map("is_published")
  status         Status                 @default(SCHEDULED)
  submissionType SubmissionType         @default(INDIVIDUAL) @map("submission_type")
  groupId        String?                @map("group_id")
  allowLate      Boolean                @default(true) @map("allow_late")
  extensionDate  DateTime?              @map("extension_date") @db.Date
  isAiGenerated  Boolean                @default(false) @map("is_ai_generated")
  version        Int                    @default(1) @map("version")
  createdAt      DateTime               @default(now()) @map("created_at")
  updatedAt      DateTime               @updatedAt @map("updated_at")
  attachments    AssignmentAttachment[]
  comments       AssignmentComment[]
  submissions    AssignmentSubmission[]
  classSection   ClassSection           @relation(fields: [classSectionId], references: [id])
  createdBy      Teacher                @relation("AssignmentCreator", fields: [createdById], references: [id])
  group          AssignmentGroup?       @relation(fields: [groupId], references: [id])

  @@index([classSectionId, createdAt])
  @@map("assignments")
}

model AssignmentSubmission {
  id             String                 @id @default(cuid())
  assignmentId   String                 @map("assignment_id")
  studentId      String                 @map("student_id")
  submissionTime DateTime               @map("submission_time")
  obtainedPoints Float                  @default(0) @map("obtained_points")
  status         AnswerScriptStatus     @map("status")
  feedback       String?
  gradedById     String?                @map("graded_by")
  gradedAt       DateTime?              @map("graded_at")
  isLate         Boolean                @default(false) @map("is_late")
  createdAt      DateTime               @default(now()) @map("created_at")
  updatedAt      DateTime               @updatedAt @map("updated_at")
  attachments    AssignmentAttachment[]
  comments       AssignmentComment[]
  assignment     Assignment             @relation(fields: [assignmentId], references: [id])
  gradedBy       Teacher?               @relation("GradedByTeacher", fields: [gradedById], references: [id])
  student        Student                @relation(fields: [studentId], references: [id])

  @@index([assignmentId, studentId])
  @@map("assignment_submissions")
}

model AssignmentAttachment {
  id           String                @id @default(cuid())
  assignmentId String?               @map("assignment_id")
  submissionId String?               @map("submission_id")
  fileUrl      String                @map("file_url")
  fileName     String                @map("file_name")
  fileType     String                @map("file_type")
  fileSize     Int                   @map("file_size")
  uploadedById String                @map("uploaded_by")
  createdAt    DateTime              @default(now()) @map("created_at")
  assignment   Assignment?           @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  submission   AssignmentSubmission? @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  uploadedBy   User                  @relation("UploadedByUser", fields: [uploadedById], references: [id])

  @@map("assignment_attachments")
}

model AssignmentGroup {
  id             String                  @id @default(cuid())
  classSectionId String                  @map("class_section_id")
  name           String                  @map("group_name")
  createdAt      DateTime                @default(now()) @map("created_at")
  updatedAt      DateTime                @updatedAt @map("updated_at")
  members        AssignmentGroupMember[]
  classSection   ClassSection            @relation(fields: [classSectionId], references: [id])
  assignments    Assignment[]

  @@map("assignment_groups")
}

model AssignmentGroupMember {
  id        String          @id @default(cuid())
  groupId   String          @map("group_id")
  studentId String          @map("student_id")
  createdAt DateTime        @default(now()) @map("created_at")
  group     AssignmentGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)
  student   Student         @relation(fields: [studentId], references: [id])

  @@map("assignment_group_members")
}

model AssignmentComment {
  id                        String                @id @default(cuid())
  assignmentId              String                @map("assignment_id")
  submissionId              String?               @map("submission_id")
  userId                    String                @map("user_id")
  content                   String
  parent_id                 String?
  createdAt                 DateTime              @default(now()) @map("created_at")
  updatedAt                 DateTime              @updatedAt @map("updated_at")
  assignment                Assignment            @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  assignment_comments       AssignmentComment?    @relation("assignment_commentsToassignment_comments", fields: [parent_id], references: [id], onDelete: Cascade)
  other_assignment_comments AssignmentComment[]   @relation("assignment_commentsToassignment_comments")
  submission                AssignmentSubmission? @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  user                      User                  @relation(fields: [userId], references: [id])

  @@map("assignment_comments")
}

model ClassStream {
  id             String       @id @default(cuid())
  classSectionId String       @map("class_section_id")
  contentType    ContentType  @map("content_type")
  contentId      String       @map("content_id")
  createdAt      DateTime     @default(now()) @map("created_at")
  classSection   ClassSection @relation(fields: [classSectionId], references: [id], onDelete: Cascade)

  @@index([classSectionId, createdAt])
  @@map("class_streams")
}

model CalendarEvent {
  id              String        @id @default(cuid())
  title           String
  description     String?
  classSectionId  String?       @map("class_section_id")
  institutionId   String        @map("institution_id")
  startTime       DateTime      @map("start_time")
  endTime         DateTime?     @map("end_time")
  eventType       EventType     @map("event_type")
  relatedEntityId String?       @map("related_entity_id")
  createdById     String        @map("created_by")
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")
  classSection    ClassSection? @relation(fields: [classSectionId], references: [id])
  createdBy       User          @relation("CreatedByUser", fields: [createdById], references: [id])
  institution     Institution   @relation(fields: [institutionId], references: [id])

  @@map("calendar_events")
}

model Note {
  id             String           @id @default(cuid())
  title          String
  content        String?
  classSectionId String           @map("class_section_id")
  teacherId      String           @map("teacher_id")
  subjectName    String?          @map("subject_name")
  isPublished    Boolean          @default(false) @map("is_published")
  fileType       String?          @map("file_type")
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @updatedAt @map("updated_at")
  attachments    NoteAttachment[]
  videoData      Json?            @map("video_data")
  classSection   ClassSection     @relation(fields: [classSectionId], references: [id])
  teacher        Teacher          @relation("NoteCreator", fields: [teacherId], references: [id], map: "notes_creator_teacher_id_fkey")
  Teacher        Teacher          @relation(fields: [teacherId], references: [id])

  @@map("notes")
}

model NoteAttachment {
  id           String   @id @default(cuid())
  noteId       String   @map("note_id")
  fileUrl      String   @map("file_url")
  fileName     String   @map("file_name")
  fileType     String   @map("file_type")
  fileSize     Int      @map("file_size")
  uploadedById String   @map("uploaded_by")
  createdAt    DateTime @default(now()) @map("created_at")
  note         Note     @relation(fields: [noteId], references: [id], onDelete: Cascade)
  uploadedBy   User     @relation("UploadedNoteAttachment", fields: [uploadedById], references: [id])

  @@map("note_attachments")
}


model TeacherCourseSectionRelation {
  id             String       @id @default(cuid())
  teacherId      String       @map("teacher_id")
  courseId       String       @map("course_id")
  classSectionId String       @map("class_section_id")
  semesterId     String?      @map("semester_id")
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")
  teacher        Teacher      @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  course         Course       @relation(fields: [courseId], references: [id], onDelete: Cascade)
  classSection   ClassSection @relation(fields: [classSectionId], references: [id], onDelete: Cascade)
  semester       Semester?    @relation(fields: [semesterId], references: [id], onDelete: Restrict)

  @@unique([teacherId, courseId, classSectionId, semesterId])
  @@map("teacher_course_section_relations")
}

enum Role {
  ADMIN
  TEACHER
  STUDENT
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
}

enum ExamStatus {
  DRAFT
  PUBLISHED
  IN_PROGRESS
  COMPLETED
  GRADED
}

enum AnswerScriptStatus {
  PENDING
  GRADED
  REVIEWED
}

enum AIContentStatus {
  PROCESSING
  READY
  FAILED
}

enum SubscriptionStatus {
  ACTIVE
  EXPIRED
  CANCELLED
  PENDING
}

enum InvoiceStatus {
  PENDING
  PAID
  OVERDUE
  CANCELLED
}

enum TransactionType {
  PURCHASE
  USAGE
  REFUND
  EXPIRY
  BONUS
}

enum CreditType {
  VIDEO
  QUESTION_PAPER
  COPY_CHECKING
}

enum PerformanceCategory {
  EXCELLENT
  GOOD
  SATISFACTORY
  NEEDS_IMPROVEMENT
  POOR
}

enum ActionType {
  LOGIN
  LOGOUT
  CREATE
  UPDATE
  DELETE
  VIEW
}

enum Status {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum EnrollmentStatus {
  ACTIVE
  GRADUATED
  SUSPENDED
  WITHDRAWN
}

enum ClassEnrollmentStatus {
  ENROLLED
  DROPPED
  COMPLETED
}

enum QuestionType {
  MCQ
  SHORT_ANSWER
  LONG_ANSWER
  CODING
}

enum CourseType {
  CORE
  ELECTIVE
}

enum EmploymentStatus {
  FULL_TIME
  PART_TIME
  CONTRACT
  GUEST
}

enum SessionType {
  LECTURE
  LAB
  TUTORIAL
}

enum SubmissionType {
  INDIVIDUAL
  GROUP
}

enum ContentType {
  ANNOUNCEMENT
  ASSIGNMENT
  COMMENT
}

enum EventType {
  ASSIGNMENT_DEADLINE
  EXAM
  CLASS
  OTHER
}
