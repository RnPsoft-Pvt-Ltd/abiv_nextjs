/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */







declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  Department: { // root type
    code?: string | null; // String
    description?: string | null; // String
    id?: string | null; // String
    institutionId?: string | null; // String
    name?: string | null; // String
  }
  Institution: { // root type
    id?: string | null; // String
    name?: string | null; // String
  }
  Mutation: {};
  Query: {};
  Teacher: { // root type
    departmentId?: string | null; // String
    email?: string | null; // String
    id?: string | null; // String
    name?: string | null; // String
  }
  User: { // root type
    email?: string | null; // String
    id?: string | null; // String
    isActive?: boolean | null; // Boolean
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  Department: { // field return type
    code: string | null; // String
    description: string | null; // String
    id: string | null; // String
    institutionId: string | null; // String
    name: string | null; // String
    teachers: Array<NexusGenRootTypes['Teacher'] | null> | null; // [Teacher]
  }
  Institution: { // field return type
    id: string | null; // String
    name: string | null; // String
    users: Array<NexusGenRootTypes['User'] | null> | null; // [User]
  }
  Mutation: { // field return type
    createUser: NexusGenRootTypes['User'] | null; // User
    deleteUser: NexusGenRootTypes['User'] | null; // User
    updateUser: NexusGenRootTypes['User'] | null; // User
  }
  Query: { // field return type
    department: NexusGenRootTypes['Department'] | null; // Department
    departments: Array<NexusGenRootTypes['Department'] | null> | null; // [Department]
    institutions: Array<NexusGenRootTypes['Institution'] | null> | null; // [Institution]
    teacher: NexusGenRootTypes['Teacher'] | null; // Teacher
    teachers: Array<NexusGenRootTypes['Teacher'] | null> | null; // [Teacher]
    user: NexusGenRootTypes['User'] | null; // User
    users: Array<NexusGenRootTypes['User'] | null> | null; // [User]
  }
  Teacher: { // field return type
    department: NexusGenRootTypes['Department'] | null; // Department
    departmentId: string | null; // String
    email: string | null; // String
    id: string | null; // String
    name: string | null; // String
  }
  User: { // field return type
    email: string | null; // String
    id: string | null; // String
    institution: NexusGenRootTypes['Institution'] | null; // Institution
    isActive: boolean | null; // Boolean
  }
}

export interface NexusGenFieldTypeNames {
  Department: { // field return type name
    code: 'String'
    description: 'String'
    id: 'String'
    institutionId: 'String'
    name: 'String'
    teachers: 'Teacher'
  }
  Institution: { // field return type name
    id: 'String'
    name: 'String'
    users: 'User'
  }
  Mutation: { // field return type name
    createUser: 'User'
    deleteUser: 'User'
    updateUser: 'User'
  }
  Query: { // field return type name
    department: 'Department'
    departments: 'Department'
    institutions: 'Institution'
    teacher: 'Teacher'
    teachers: 'Teacher'
    user: 'User'
    users: 'User'
  }
  Teacher: { // field return type name
    department: 'Department'
    departmentId: 'String'
    email: 'String'
    id: 'String'
    name: 'String'
  }
  User: { // field return type name
    email: 'String'
    id: 'String'
    institution: 'Institution'
    isActive: 'Boolean'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    createUser: { // args
      email: string; // String!
      institutionId: string; // String!
      passwordHash: string; // String!
    }
    deleteUser: { // args
      id: string; // String!
    }
    updateUser: { // args
      email?: string | null; // String
      id: string; // String!
      isActive?: string | null; // String
    }
  }
  Query: {
    department: { // args
      id: string; // String!
    }
    teacher: { // args
      id: string; // String!
    }
    user: { // args
      id: string; // String!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}